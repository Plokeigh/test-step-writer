'use client';

import React, { useState } from 'react';

export default function UploadApp() {
  const [status, setStatus] = useState<string>('');
  const [isProcessing, setIsProcessing] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const transcriptInput = e.currentTarget.querySelector('input[name="transcript"]') as HTMLInputElement;
    const agendaInput = e.currentTarget.querySelector('input[name="agenda"]') as HTMLInputElement;

    if (!transcriptInput?.files?.[0]) {
      alert('Please select a transcript file');
      return;
    }
    if (!agendaInput?.files?.[0]) {
      alert('Please select an agenda file');
      return;
    }

    setIsProcessing(true);
    setStatus('Processing...');

    try {
      const formData = new FormData();
      formData.append('transcript', transcriptInput.files[0]);
      formData.append('agenda', agendaInput.files[0]);

      const response = await fetch('http://localhost:3002/upload', {
        method: 'POST',
        headers: {
          'Accept': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/json',
        },
        body: formData,
      });

      if (!response.ok) {
        let errorMessage = `HTTP error! status: ${response.status}`;
        try {
          const errorData = await response.json();
          errorMessage = errorData.error || errorMessage;
        } catch (e) {
          console.error('Error parsing error response:', e);
          errorMessage = await response.text();
        }
        throw new Error(errorMessage);
      }

      const contentType = response.headers.get('Content-Type');
      if (contentType?.includes('wordprocessingml.document')) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        const contentDisposition = response.headers.get('Content-Disposition');
        const filenameMatch = contentDisposition?.match(/filename="(.+)"/);
        const filename = filenameMatch ? filenameMatch[1] : 'Processed_Transcript.docx';
        
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        setStatus('File processed and downloaded successfully!');
      } else {
        let resultMessage = 'Received unexpected response format.';
         try {
           const result = await response.json();
           resultMessage = result.message || result.error || 'Unexpected JSON response.';
         } catch (e) {
            resultMessage = await response.text();
         }
        setStatus(`Warning: ${resultMessage}`);
      }

      transcriptInput.value = '';
      agendaInput.value = '';

      setTimeout(() => setStatus(''), 5000);
    } catch (error) {
      console.error('Error:', error);
      setStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">Transcript Processor</h1>
        
        <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">How to Use</h2>
          <div className="space-y-4 text-gray-600">
            <p className="font-medium text-gray-900">Processing your transcript:</p>
            <ol className="list-decimal list-inside space-y-2">
              <li>Upload the meeting transcript (e.g., .docx, .txt)</li>
              <li>Upload the corresponding agenda with questions (.txt file, one question per line)</li>
              <li>Click the "Process Transcript" button</li>
              <li>Wait for the processing to complete</li>
              <li>Your processed Word Document containing questions and answers will automatically download</li>
            </ol>

            <p className="font-bold text-red-600 mt-6 border border-red-200 p-4 bg-red-50 rounded-md">
              <span className="underline">Disclaimer:</span> The content generated by this tool utilizes an AI model that, while highly accurate, may occasionally produce errors or inaccuracies. It is essential that you thoroughly review and verify all outputs before use. Documents generated by this tool are intended solely as drafts or guides and should NEVER be considered finalized or submitted directly to clients without careful prior review.
            </p>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-lg p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <label htmlFor="transcript" className="block text-sm font-medium text-gray-700">
                Upload Transcript File (e.g., .docx, .txt)
              </label>
              <input
                type="file"
                id="transcript"
                name="transcript"
                accept=".docx,.txt,.md"
                className="block w-full text-sm text-gray-500
                         file:mr-4 file:py-2 file:px-4
                         file:rounded-md file:border-0
                         file:text-sm file:font-semibold
                         file:bg-blue-50 file:text-blue-700
                         hover:file:bg-blue-100"
              />
            </div>

            <div className="space-y-2">
              <label htmlFor="agenda" className="block text-sm font-medium text-gray-700">
                Upload Agenda File (.xlsx - Title in A1, Questions in A2, A3...)
              </label>
              <input
                type="file"
                id="agenda"
                name="agenda"
                accept=".xlsx"
                className="block w-full text-sm text-gray-500
                         file:mr-4 file:py-2 file:px-4
                         file:rounded-md file:border-0
                         file:text-sm file:font-semibold
                         file:bg-green-50 file:text-green-700
                         hover:file:bg-green-100"
              />
            </div>

            <div className="flex space-x-4">
              <button
                type="submit"
                disabled={isProcessing}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
              >
                {isProcessing ? 'Processing...' : 'Process Transcript'}
              </button>
            </div>
          </form>

          {status && (
            <div
              className={`mt-4 p-3 rounded-md ${
                status.includes('Error') || status.includes('Warning:')
                  ? 'bg-red-50 text-red-700'
                  : 'bg-green-50 text-green-700'
              }`}
            >
              {status}
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 