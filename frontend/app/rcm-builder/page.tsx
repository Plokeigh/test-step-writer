'use client';

import React, { useState } from 'react';

export default function RCMBuilder() {
  const [status, setStatus] = useState<string>('');
  const [isProcessing, setIsProcessing] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    
    if (!formData.get('file')) {
      alert('Please select a file');
      return;
    }

    setIsProcessing(true);
    setStatus('Processing...');

    try {
      const response = await fetch('http://localhost:3001/api/generate-matrix', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'risk_control_matrix.xlsx';
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      setStatus('Matrix generated successfully!');
      setTimeout(() => setStatus(''), 3000);
    } catch (error) {
      console.error('Error:', error);
      setStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">RCM Builder</h1>
        
        <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">How to Use</h2>
          <div className="space-y-4 text-gray-600">
            <p className="font-medium text-gray-900">Preparing your scoping document:</p>
            <ol className="list-decimal list-inside space-y-2">
              <li>Review the scoping document and make sure that the information in each field is accurate</li>
              <li>Wherever you identify a gap, add "<span className="font-bold">*Flag</span>" at the beginning of the cell in the scoping document (i.e., *Flag No; the system logs are not reviewed unless there is an incident)</li>
              <li>Save the document before uploading</li>
            </ol>

            <p className="font-medium text-gray-900 mt-4">Processing your document:</p>
            <ol className="list-decimal list-inside space-y-2">
              <li>Upload your prepared IT Scoping document by clicking the "Choose File" button below</li>
              <li>Once the builder processes the IT Scoping document, your RCM will automatically download</li>
            </ol>

            <p className="font-medium text-gray-900 mt-4">Working with the generated RCM:</p>
            <ol className="list-decimal list-inside space-y-2">
              <li>Open the downloaded document and note that the rows are color coded:</li>
              <ul className="list-disc list-inside ml-6 space-y-1">
                <li><span className="text-green-600 font-medium">Green</span>: The process is in place without any gaps</li>
                <li><span className="text-yellow-600 font-medium">Yellow</span>: The control is N/A and can be deleted (always double check before deleting)</li>
                <li><span className="text-red-600 font-medium">Red</span>: You added a *Flag in the scoping document indicating a control gap</li>
              </ul>
              <li>Update Column J to indicate if there is a gap, informal process, or no gap as this field is required for the Gaps Builder tool</li>
            </ol>
            
            <p className="font-bold text-red-600 mt-6 border border-red-200 p-4 bg-red-50 rounded-md">
              <span className="underline">Disclaimer:</span> The content generated by this tool utilizes an AI model that, while highly accurate, may occasionally produce errors or inaccuracies. It is essential that you thoroughly review and verify all outputs before use. Documents generated by this tool are intended solely as drafts or guides and should NEVER be considered finalized or submitted directly to clients without careful prior review.
            </p>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-lg p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <label htmlFor="file" className="block text-sm font-medium text-gray-700">
                Upload Excel File
              </label>
              <input
                type="file"
                id="file"
                name="file"
                accept=".xlsx,.xls"
                className="block w-full text-sm text-gray-500
                         file:mr-4 file:py-2 file:px-4
                         file:rounded-md file:border-0
                         file:text-sm file:font-semibold
                         file:bg-blue-50 file:text-blue-700
                         hover:file:bg-blue-100"
              />
            </div>

            <button
              type="submit"
              disabled={isProcessing}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {isProcessing ? 'Processing...' : 'Generate Matrix'}
            </button>
          </form>

          {status && (
            <div className={`mt-4 text-sm ${status.includes('Error') ? 'text-red-600' : 'text-green-600'}`}>
              {status}
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 